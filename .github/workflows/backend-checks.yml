name: Python Quality and Security Checks

on:
  push:
    branches: [ main, dev ]
  pull_request:
    branches: [ main, dev ]

jobs:
  ruff:
    name: Ruff Linting
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install ruff

      - name: Run ruff
        run: ruff check backend/ --config backend/pyproject.toml

  mypy:
    name: Mypy Type Checking
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install mypy
          pip install -r backend/requirements.txt

      - name: Run mypy
        run: mypy --config-file backend/pyproject.toml backend/

  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install bandit safety

      - name: Run bandit
        run: bandit -r backend/ -x backend/tests/ -ll

  docker:
    name: Docker Build & Scan
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build Docker image
        uses: docker/build-push-action@v4
        with:
          context: ./backend
          push: false
          load: true
          tags: integr8scode:test
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'integr8scode:test'
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          severity: 'CRITICAL,HIGH'
          timeout: '5m0s'

  integration-test:
    name: Integration Testing
    runs-on: ubuntu-latest
    needs: [ruff, mypy, security-scan, docker]

    steps:
      - uses: actions/checkout@v4

      - name: Setup Docker
        uses: docker/setup-buildx-action@v2

      - name: Check repository structure
        run: |
          echo "Listing repository contents:"
          ls -la
          echo "Looking for docker-compose files:"
          find . -name "docker-compose*.yml"

      - name: Create CI docker-compose file
        run: |
          # Create a simplified docker-compose file for CI
          cat > docker-compose.ci.yml << 'EOF'
          services:
            shared-ca:
              image: alpine:latest
              volumes:
                - shared_ca:/shared_ca
              command: sh -c "mkdir -p /shared_ca && chmod 777 /shared_ca && echo 'Shared CA directory ready' && sleep 2"
              networks:
                - app-network

            cert-generator-backend:
              build:
                context: ./cert-generator
                dockerfile: Dockerfile
              volumes:
                - ./backend/certs:/certs
                - ./backend:/backend
                # Removed K8s volume mounts
                - shared_ca:/shared_ca
              command: sh -c "mkcert -install && mkcert -cert-file /certs/server.crt -key-file /certs/server.key localhost kubernetes.docker.internal backend 127.0.0.1 ::1 && echo 'Certificates generated using shared root CA' && sleep 2"
              restart: "no"
              networks:
                - app-network
              depends_on:
                shared-ca:
                  condition: service_completed_successfully

            cert-generator-frontend:
              build:
                context: ./cert-generator
                dockerfile: Dockerfile
              volumes:
                - ./frontend/certs:/certs
                # Removed K8s volume mounts
                - shared_ca:/shared_ca
              command: sh -c "mkcert -install && mkcert -cert-file /certs/server.crt -key-file /certs/server.key localhost kubernetes.docker.internal frontend 127.0.0.1 ::1 && echo 'Certificates generated using shared root CA' && sleep 2"
              restart: "no"
              networks:
                - app-network
              depends_on:
                shared-ca:
                  condition: service_completed_successfully

            mongo:
              image: mongo:4.4
              ports:
                - "27017:27017"
              volumes:
                - mongo_data:/data/db
              networks:
                - app-network
              container_name: mongo

            backend:
              build:
                context: ./backend
                dockerfile: Dockerfile
              depends_on:
                cert-generator-backend:
                  condition: service_completed_successfully
                mongo:
                  condition: service_started
              volumes:
                - ./backend:/app
                - ./backend/certs:/app/certs
              ports:
                - "443:443"
              networks:
                - app-network
              container_name: backend
              environment:
                - MONGODB_URL=mongodb://mongo:27017/integr8scode
                - SERVER_HOST=0.0.0.0
                - SKIP_K8S_VALIDATION=true
              healthcheck:
                test: [ "CMD", "curl", "-k", "https://localhost/api/v1/health" ]
                interval: 10s
                timeout: 5s
                retries: 5

            frontend:
              container_name: frontend
              build:
                context: ./frontend
                dockerfile: Dockerfile
              depends_on:
                cert-generator-frontend:
                  condition: service_completed_successfully
                backend:
                  condition: service_healthy
              volumes:
                - ./frontend:/app
                - /app/node_modules
                - ./frontend/certs:/app/certs
              ports:
                - "5001:5001"
              networks:
                - app-network
              environment:
                - VITE_BACKEND_URL=https://backend:443

          volumes:
            mongo_data:
            shared_ca:

          networks:
            app-network:
              driver: bridge
          EOF
          echo "Created docker-compose.ci.yml"
          cat docker-compose.ci.yml

      - name: Setup Kubernetes (k3s)
        run: |
          curl -sfL https://get.k3s.io | sh -
          mkdir -p ~/.kube
          sudo k3s kubectl config view --raw > ~/.kube/config
          chmod 600 ~/.kube/config
          # Wait for k3s to be ready
          echo "Waiting for Kubernetes to be ready..."
          timeout 60 bash -c 'until kubectl get nodes; do sleep 2; echo "Waiting for Kubernetes..."; done'
          # Display Kubernetes info
          kubectl version
          kubectl get nodes

      - name: Start services with Docker Compose
        run: |
          docker compose -f docker-compose.ci.yml up -d
          echo "Waiting for services to start..."
          sleep 30

      - name: Check running containers
        run: docker ps -a

      - name: Wait for backend to be healthy
        run: |
          echo "Waiting for backend to be healthy..."
          timeout 300 bash -c 'until curl -k https://localhost:443/api/v1/health; do sleep 5; echo "Retrying..."; done'
          echo "Backend is healthy!"

      - name: Wait for frontend to be ready
        run: |
          echo "Waiting for frontend to be ready..."
          timeout 120 bash -c 'until curl -k https://localhost:5001; do sleep 5; echo "Retrying..."; done'
          echo "Frontend is ready!"

      - name: Check Kubernetes setup
        run: |
          kubectl get pods
          kubectl get services
          kubectl top nodes || echo "Metrics server not available yet"

      - name: Test K8s limits endpoint
        run: |
          curl -k https://localhost:443/api/v1/k8s-limits
          echo "K8s limits endpoint test completed"

      - name: Test Python script execution
        run: |
          # Test execution with Python 3.10
          curl -k -X POST https://localhost:443/api/v1/execute \
            -H "Content-Type: application/json" \
            -d '{"script":"print(\"Hello from GitHub Actions!\")", "python_version":">=3.10"}' \
            -o response.json
          
          cat response.json
          execution_id=$(grep -o '"execution_id":"[^"]*' response.json | cut -d'"' -f4)
          
          # Wait for execution to complete
          echo "Waiting for execution to complete..."
          timeout 60 bash -c 'until curl -k https://localhost:443/api/v1/executions/'$execution_id' | grep -q "completed"; do sleep 2; done'
          
          # Check execution result
          curl -k https://localhost:443/api/v1/executions/$execution_id > execution_result.json
          cat execution_result.json
          grep "Hello from GitHub Actions" execution_result.json

      - name: Test Python version constraint
        run: |
          # Test with Python < 3.10 (should produce syntax error with match-case)
          curl -k -X POST https://localhost:443/api/v1/execute \
            -H "Content-Type: application/json" \
            -d '{"script":"match 42:\n    case 42:\n        print(\"match-case works\")\n    case _:\n        print(\"no match\")", "python_version":"<3.10"}' \
            -o response_syntax_error.json
          
          cat response_syntax_error.json
          error_execution_id=$(grep -o '"execution_id":"[^"]*' response_syntax_error.json | cut -d'"' -f4)
          
          # Wait for execution to complete
          echo "Waiting for syntax error execution to complete..."
          timeout 60 bash -c 'until curl -k https://localhost:443/api/v1/executions/'$error_execution_id' | grep -q "completed"; do sleep 2; done'
          
          # Check execution result - should have SyntaxError
          curl -k https://localhost:443/api/v1/executions/$error_execution_id > error_result.json
          cat error_result.json
          grep "SyntaxError" error_result.json

      - name: Collect logs
        if: always()
        run: |
          mkdir -p logs
          docker compose -f docker-compose.ci.yml logs > logs/docker-compose.log || echo "Could not collect docker-compose logs"
          docker compose -f docker-compose.ci.yml logs backend > logs/backend.log || echo "No backend logs available"
          docker compose -f docker-compose.ci.yml logs frontend > logs/frontend.log || echo "No frontend logs available"
          docker compose -f docker-compose.ci.yml logs mongo > logs/mongo.log || echo "No mongo logs available"
          kubectl get pods -A > logs/k8s-pods.log || echo "Could not get Kubernetes pods"
          kubectl describe pods > logs/k8s-describe-pods.log || echo "Could not describe Kubernetes pods"

      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: integration-test-logs
          path: logs/