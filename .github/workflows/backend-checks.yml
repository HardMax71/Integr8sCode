name: Backend Checks and Tests

on:
  push:
    branches: [ main, dev ]
  pull_request:
    branches: [ main, dev ]
  workflow_dispatch:

jobs:
  # Quality checks
  ruff:
    name: Ruff Linting
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install ruff
      - name: Run ruff
        run: ruff check backend/ --config backend/pyproject.toml

  mypy:
    name: Mypy Type Checking
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install mypy
          pip install -r backend/requirements.txt
          pip install -r backend/requirements-dev.txt
      - name: Run mypy
        run: mypy --config-file backend/pyproject.toml backend/

  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install bandit safety
      - name: Run bandit
        run: bandit -r backend/ -x backend/tests/ -ll

  docker:
    name: Docker Build & Scan
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Build Docker image
        uses: docker/build-push-action@v4
        with:
          context: ./backend
          push: false
          load: true
          tags: integr8scode:test
          cache-from: type=gha
          cache-to: type=gha,mode=max
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'integr8scode:test'
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          severity: 'CRITICAL,HIGH'
          timeout: '5m0s'

  # Tests - runs only after all quality checks pass
  tests:
    name: Backend Tests
    runs-on: ubuntu-latest
    needs: [ruff, mypy, security-scan, docker]
    steps:
      - uses: actions/checkout@v4

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Install yq
        run: |
          sudo wget https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64 -O /usr/local/bin/yq
          sudo chmod +x /usr/local/bin/yq
          yq --version

      - name: Modify Docker Compose for CI using yq
        run: |
          cp docker-compose.yaml docker-compose.ci.yaml
          echo "Original docker-compose.ci.yaml:"
          cat docker-compose.ci.yaml
          yq eval 'del(.services.cert-generator.volumes[] | select(test("^\.?~/\.kube")))' -i docker-compose.ci.yaml
          yq eval '.services.cert-generator.environment += ["CI=true"]' -i docker-compose.ci.yaml
          yq eval '.services.backend.extra_hosts += ["host.docker.internal:host-gateway"]' -i docker-compose.ci.yaml
          yq eval '.services.backend.environment += ["TESTING=true"]' -i docker-compose.ci.yaml
          echo "--- Modified docker-compose.ci.yaml ---"
          cat docker-compose.ci.yaml
          echo "------------------------------------"

      - name: Setup Kubernetes (k3s)
        run: |
          curl -sfL https://get.k3s.io | INSTALL_K3S_EXEC="--disable=traefik --tls-san host.docker.internal" sh -
          sudo k3s kubectl config view --raw > kubeconfig_k3s.yaml
          mkdir -p ~/.kube
          cp kubeconfig_k3s.yaml ~/.kube/config
          chmod 600 ~/.kube/config kubeconfig_k3s.yaml
          echo "Waiting for Kubernetes API server..."
          timeout 90 bash -c 'until sudo k3s kubectl cluster-info; do sleep 5; echo "Waiting for Kubernetes API..."; done'
          echo "Kubernetes cluster ready!"
          kubectl version
          kubectl get nodes

      - name: Create K8s Service Account and RBAC
        run: |
          kubectl create serviceaccount integr8scode-sa -n default --dry-run=client -o yaml | kubectl apply -f -
          kubectl apply -f - <<EOF
          apiVersion: rbac.authorization.k8s.io/v1
          kind: Role
          metadata:
            name: integr8scode-role
            namespace: default
          rules:
          - apiGroups: [""]
            resources: ["configmaps", "pods", "pods/log"]
            verbs: ["create", "get", "list", "watch", "delete"]
          EOF
          kubectl apply -f - <<EOF
          apiVersion: rbac.authorization.k8s.io/v1
          kind: RoleBinding
          metadata:
            name: integr8scode-rolebinding
            namespace: default
          subjects:
          - kind: ServiceAccount
            name: integr8scode-sa
            namespace: default
          roleRef:
            kind: Role
            name: integr8scode-role
            apiGroup: rbac.authorization.k8s.io
          EOF
          echo "Service Account and RBAC created."

      - name: Generate Kubeconfig for Cert Generator Script
        run: |
          echo "Generating token and kubeconfig..."
          K8S_CA_CERT_DATA=$(kubectl config view --raw -o jsonpath='{.clusters[0].cluster.certificate-authority-data}')
          TOKEN=$(kubectl create token integr8scode-sa -n default --duration=1h)
          K8S_SERVER_FOR_CONTAINER="https://host.docker.internal:6443"
          echo "Using K8s server URL for container: $K8S_SERVER_FOR_CONTAINER"
          mkdir -p ./backend
          cat > ./backend/kubeconfig.yaml << EOF
          apiVersion: v1
          kind: Config
          clusters:
          - name: ci-k3s-cluster
            cluster:
              server: ${K8S_SERVER_FOR_CONTAINER}
              certificate-authority-data: ${K8S_CA_CERT_DATA}
          users:
          - name: integr8scode-sa
            user:
              token: "${TOKEN}"
          contexts:
          - name: integr8scode-context
            context:
              cluster: ci-k3s-cluster
              user: integr8scode-sa
              namespace: default
          current-context: integr8scode-context
          EOF
          echo "Generated ./backend/kubeconfig.yaml for cert-generator script"
          ls -l ./backend/kubeconfig.yaml
          sed 's/token: ".*"/token: "***"/' ./backend/kubeconfig.yaml

      - name: Start services with Docker Compose
        run: |
          docker compose -f docker-compose.ci.yaml up --build -d --remove-orphans
          echo "Waiting for services to potentially start..."
          sleep 45

      - name: Check Docker Compose Status
        run: |
          echo "Docker Compose Status:"
          docker compose -f docker-compose.ci.yaml ps
          echo "-------------------------"
          echo "Cert Generator logs (initial):"
          docker compose -f docker-compose.ci.yaml logs cert-generator || echo "No cert-generator logs yet."
          echo "-------------------------"
          echo "Backend container logs (initial):"
          docker compose -f docker-compose.ci.yaml logs backend || echo "No backend logs yet."
          echo "-------------------------"

      - name: Wait for backend to be healthy
        run: |
          echo "Waiting for backend to be healthy..."
          timeout 300 bash -c 'until curl -ksfL https://localhost:443/api/v1/health -o /dev/null; do \
            echo "Retrying backend health check (https://localhost:443/api/v1/health)..."; \
            docker compose -f docker-compose.ci.yaml ps backend; \
            sleep 5; \
          done'
          echo "Backend is healthy!"

      - name: Wait for frontend to be ready
        run: |
          echo "Waiting for frontend to be ready..."
          timeout 120 bash -c 'until curl -ksfL https://localhost:5001 -o /dev/null; do \
             echo "Retrying frontend check (https://localhost:5001)..."; \
             docker compose -f docker-compose.ci.yaml ps frontend; \
             sleep 5; \
          done'
          echo "Frontend is ready!"

      - name: Check K8s setup status after startup
        run: |
          echo "--- Kubernetes Pods ---"
          kubectl get pods -A -o wide
          echo "--- Kubernetes Services ---"
          kubectl get services -A -o wide
          echo "--- Kubernetes Service Accounts ---"
          kubectl get sa -n default
          echo "--- Kubernetes Roles ---"
          kubectl get roles -n default
          echo "--- Kubernetes RoleBindings ---"
          kubectl get rolebindings -n default

      - name: Set up Python for Tests
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install Python test dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y python3 python3-pip
          cd backend
          pip3 install -r requirements.txt
          pip3 install -r requirements-dev.txt

      - name: Run backend tests with coverage
        run: |
          cd backend
          python -m pytest tests/integration -v --cov=app --cov-report=xml --cov-report=term

      - name: Collect logs
        if: always()
        run: |
          mkdir -p logs
          docker compose -f docker-compose.ci.yaml logs > logs/docker-compose.log || echo "Could not collect docker-compose logs"
          docker compose -f docker-compose.ci.yaml logs cert-generator > logs/cert-generator.log || echo "No cert-generator logs available"
          docker compose -f docker-compose.ci.yaml logs backend > logs/backend.log || echo "No backend logs available"
          docker compose -f docker-compose.ci.yaml logs frontend > logs/frontend.log || echo "No frontend logs available"
          docker compose -f docker-compose.ci.yaml logs mongo > logs/mongo.log || echo "No mongo logs available"
          kubectl get events --sort-by='.metadata.creationTimestamp' > logs/k8s-events.log || echo "Could not get K8s events"
          kubectl get pods -A -o wide > logs/k8s-pods-final.log || echo "Could not get final K8s pods"
          kubectl describe pods -A > logs/k8s-describe-pods-final.log || echo "Could not describe final K8s pods"

      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: integration-test-logs
          path: logs/