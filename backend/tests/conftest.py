# tests/conftest.py
import pathlib
import ssl
from typing import AsyncGenerator, Optional

import httpx
import pytest
from app.config import Settings
from motor.motor_asyncio import AsyncIOMotorClient, AsyncIOMotorDatabase

PROJECT_ROOT = pathlib.Path(__file__).parent.parent
CA_CERT_PATH = PROJECT_ROOT / "shared_ca" / "rootCA.pem"
ENV_FILE_PATH = pathlib.Path(__file__).parent / '.env.test'


@pytest.fixture(scope="function")
async def client() -> AsyncGenerator[httpx.AsyncClient, None]:
    backend_service_url = "https://localhost:443"

    if not CA_CERT_PATH.is_file():
        fallback_ca_path = pathlib.Path('.').resolve() / "shared_ca" / "rootCA.pem"
        if fallback_ca_path.is_file():
            ca_path_to_use = fallback_ca_path
        else:
            pytest.fail(
                f"Local CA certificate for testing not found at expected path: {CA_CERT_PATH} "
                f"or fallback path: {fallback_ca_path}. "
                f"Ensure the cert-generator service ran and the shared_ca volume/directory is accessible.",
                pytrace=False
            )
    else:
        ca_path_to_use = CA_CERT_PATH

    verify_param = str(ca_path_to_use)

    async with httpx.AsyncClient(
            base_url=backend_service_url,
            verify=verify_param,
            timeout=30.0
    ) as async_client:
        try:
            response = await async_client.get("/api/v1/health", timeout=20.0)
            response.raise_for_status()
        except ssl.SSLCertVerificationError as e:
             pytest.fail(f"SSL certificate verification failed connecting to {backend_service_url} "
                         f"using CA '{verify_param}'. Error: {e}\n"
                         f"Ensure the CA file exists and is the correct one generated by mkcert.",
                         pytrace=False)
        except httpx.ConnectError as e:
             pytest.fail(f"Failed to connect to backend service at {backend_service_url}. "
                         f"Is the service running and accessible? Error: {e}", pytrace=False)
        except (httpx.RequestError, httpx.HTTPStatusError) as e:
            pytest.fail(f"Failed initial connection/health check to backend service at {backend_service_url}: {e}",
                        pytrace=False)
        except Exception as e:
             pytest.fail(f"An unexpected error occurred during initial health check to {backend_service_url}: {e}",
                         pytrace=False)

        yield async_client


@pytest.fixture(scope="function")
async def db() -> AsyncGenerator[AsyncIOMotorDatabase, None]:
    if not ENV_FILE_PATH.is_file():
        pytest.fail(f".env.test file not found at expected location: {ENV_FILE_PATH}")

    settings_env_file = ENV_FILE_PATH

    try:
        settings = Settings(_env_file=settings_env_file, _env_file_encoding='utf-8')
    except Exception as load_exc:
         pytest.fail(f"Failed to load settings from {settings_env_file}: {load_exc}")

    if (not settings.MONGODB_URL or not settings.PROJECT_NAME or
            "localhost:27017" not in settings.MONGODB_URL):
        pytest.fail(
            f"Failed to load correct MONGODB_URL (expecting localhost) from {settings_env_file}. "
            f"Loaded URL: '{settings.MONGODB_URL}'")

    db_client: Optional[AsyncIOMotorClient] = None
    try:
        db_client = AsyncIOMotorClient(
            settings.MONGODB_URL,
            tz_aware=True,
            serverSelectionTimeoutMS=5000
        )
        await db_client.admin.command('ismaster')

        test_db_name = settings.PROJECT_NAME
        database = db_client.get_database(test_db_name)

        yield database

        await db_client.drop_database(test_db_name)

    except Exception as e:
        pytest.fail(f"DB Fixture Error: Failed setting up/cleaning test database '{settings.PROJECT_NAME}' "
                    f"using URL '{settings.MONGODB_URL}': {e}", pytrace=True)
    finally:
        if db_client:
            db_client.close()