name: Python Quality and Security Checks

on:
  push:
    branches: [ main, dev ]
  pull_request:
    branches: [ main, dev ]

jobs:
  ruff:
    name: Ruff Linting
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install ruff

      - name: Run ruff
        run: ruff check backend/ --config backend/pyproject.toml

  mypy:
    name: Mypy Type Checking
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install mypy
          pip install -r backend/requirements.txt

      - name: Run mypy
        run: mypy --config-file backend/pyproject.toml backend/

  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install bandit safety

      - name: Run bandit
        run: bandit -r backend/ -x backend/tests/ -ll

  docker:
    name: Docker Build & Scan
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build Docker image
        uses: docker/build-push-action@v4
        with:
          context: ./backend
          push: false
          load: true
          tags: integr8scode:test
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'integr8scode:test'
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          severity: 'CRITICAL,HIGH'
          timeout: '5m0s'

  integration-test:
    name: Integration Testing
    runs-on: ubuntu-latest
    needs: [ ruff, mypy, security-scan, docker ]

    steps:
      - uses: actions/checkout@v4

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Modify Docker Compose for CI
        run: |
          cp docker-compose.yaml docker-compose.ci.yaml
          # Remove the ~/.kube volume mount
          sed -i '/~\/.kube:\/root\/.kube/d' docker-compose.ci.yaml
          
          # Add the CI environment variable to the cert-generator services
          sed -i '/cert-generator-backend:/,/depends_on:/ s/networks:/environment:\n      - CI=true\n    networks:/' docker-compose.ci.yaml
          sed -i '/cert-generator-frontend:/,/depends_on:/ s/networks:/environment:\n      - CI=true\n    networks:/' docker-compose.ci.yaml
          
          # Add host.docker.internal to backend's extra_hosts
          awk '
          /^[[:space:]]*backend:/ { in_backend_service = 1 }
          in_backend_service && /^[[:space:]]*networks:/ {
            print "    extra_hosts:"
            print "      - \"host.docker.internal:host-gateway\""
            in_backend_service = 0 # Stop adding once networks is found within backend
          }
          { print }
          ' docker-compose.ci.yaml > temp_compose.yaml && mv temp_compose.yaml docker-compose.ci.yaml
          
          echo "--- Modified docker-compose.ci.yaml ---"
          cat docker-compose.ci.yaml
          echo "------------------------------------"

      - name: Setup Kubernetes (k3s)
        run: |
          curl -sfL https://get.k3s.io | INSTALL_K3S_EXEC="--disable=traefik --tls-san host.docker.internal" sh -
          sudo k3s kubectl config view --raw > kubeconfig_k3s.yaml
          mkdir -p ~/.kube
          cp kubeconfig_k3s.yaml ~/.kube/config
          chmod 600 ~/.kube/config kubeconfig_k3s.yaml
          echo "Waiting for Kubernetes API server..."
          timeout 90 bash -c 'until sudo k3s kubectl cluster-info; do sleep 5; echo "Waiting for Kubernetes API..."; done'
          echo "Kubernetes cluster ready!"
          kubectl version
          kubectl get nodes

      - name: Create K8s Service Account and RBAC
        run: |
          kubectl create serviceaccount integr8scode-sa -n default --dry-run=client -o yaml | kubectl apply -f -
          kubectl apply -f - <<EOF
          apiVersion: rbac.authorization.k8s.io/v1
          kind: Role
          metadata:
            name: integr8scode-role
            namespace: default
          rules:
          - apiGroups: [""]
            resources: ["configmaps", "pods", "pods/log"]
            verbs: ["create", "get", "list", "watch", "delete"]
          EOF
          kubectl apply -f - <<EOF
          apiVersion: rbac.authorization.k8s.io/v1
          kind: RoleBinding
          metadata:
            name: integr8scode-rolebinding
            namespace: default
          subjects:
          - kind: ServiceAccount
            name: integr8scode-sa
            namespace: default
          roleRef:
            kind: Role
            name: integr8scode-role
            apiGroup: rbac.authorization.k8s.io
          EOF
          echo "Service Account and RBAC created."

      - name: Generate Kubeconfig for Backend Service
        run: |
          echo "Generating token and kubeconfig..."
          K8S_CA_CERT_DATA=$(kubectl config view --raw -o jsonpath='{.clusters[0].cluster.certificate-authority-data}')
          TOKEN=$(kubectl create token integr8scode-sa -n default --duration=1h)
          K8S_SERVER_FOR_CONTAINER="https://host.docker.internal:6443"
          echo "Using K8s server URL for container: $K8S_SERVER_FOR_CONTAINER"
          
          mkdir -p ./backend
          cat > ./backend/kubeconfig.yaml << EOF
          apiVersion: v1
          kind: Config
          clusters:
          - name: ci-k3s-cluster
            cluster:
              server: ${K8S_SERVER_FOR_CONTAINER}
              certificate-authority-data: ${K8S_CA_CERT_DATA}
          users:
          - name: integr8scode-sa
            user:
              token: "${TOKEN}"
          contexts:
          - name: integr8scode-context
            context:
              cluster: ci-k3s-cluster
              user: integr8scode-sa
              namespace: default
          current-context: integr8scode-context
          EOF
          echo "Generated ./backend/kubeconfig.yaml"
          ls -l ./backend/kubeconfig.yaml
          # Display kubeconfig with token redacted
          sed 's/token: ".*"/token: "***"/' ./backend/kubeconfig.yaml

      - name: Start services with Docker Compose
        run: |
          docker compose -f docker-compose.ci.yaml up --build -d
          echo "Waiting for services to start..."
          sleep 30

      # Rest of the steps remain the same...