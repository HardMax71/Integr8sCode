services:
  shared-ca:
    image: alpine:latest
    volumes:
      - shared_ca:/shared_ca
    command: sh -c "mkdir -p /shared_ca && chmod 777 /shared_ca && echo 'Shared CA directory ready' && sleep 2"
    networks:
      - app-network

  cert-generator-backend:
    build:
      context: ./cert-generator
      dockerfile: Dockerfile
    volumes:
      - ./backend/certs:/certs
      - ./backend:/backend
      - ~/.kube:/root/.kube
      - shared_ca:/shared_ca
    restart: "no"
    networks:
      - app-network
    depends_on:
      shared-ca:
        condition: service_completed_successfully

  cert-generator-frontend:
    build:
      context: ./cert-generator
      dockerfile: Dockerfile
    volumes:
      - ./frontend/certs:/certs
      - ~/.kube:/root/.kube
      - shared_ca:/shared_ca
    restart: "no"
    networks:
      - app-network
    depends_on:
      shared-ca:
        condition: service_completed_successfully

  mongo:
    image: mongo:4.4
    ports:
      - "27017:27017"
    volumes:
      - mongo_data:/data/db
    networks:
      - app-network
    container_name: mongo

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    depends_on:
      cert-generator-backend:
        condition: service_completed_successfully
      mongo:
        condition: service_started
    volumes:
      - ./backend:/app
      - ./backend/certs:/app/certs
    ports:
      - "443:443"
    networks:
      - app-network
    container_name: backend
    environment:
      - MONGODB_URL=mongodb://mongo:27017/integr8scode
      - SERVER_HOST=0.0.0.0
    healthcheck:
      test: [ "CMD", "curl", "-k", "https://localhost/api/v1/health" ]
      interval: 10s
      timeout: 5s
      retries: 5

  frontend:
    container_name: frontend
    build:
      context: ./frontend
      dockerfile: Dockerfile
    depends_on:
      cert-generator-frontend:
        condition: service_completed_successfully
      backend:
        condition: service_healthy
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - ./frontend/certs:/app/certs
    ports:
      - "5001:5001"
    networks:
      - app-network
    environment:
      - VITE_BACKEND_URL=https://backend:443

  prometheus:
    container_name: prometheus
    image: prom/prometheus:v2.45.0
    ports:
      - "9090:9090"
    volumes:
      - ./backend/prometheus:/etc/prometheus
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=15d'
      - '--storage.tsdb.retention.size=5GB'
      - '--query.max-samples=50000000'
    networks:
      - app-network
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1'
        reservations:
          memory: 1G
          cpus: '0.5'

  grafana:
    container_name: grafana
    image: grafana/grafana:latest
    user: "472" # user rights
    ports:
      - "3000:3000"
    volumes:
      - ./backend/grafana/grafana.ini:/etc/grafana/grafana.ini
      - ./backend/grafana/provisioning:/etc/grafana/provisioning
      - grafana_data:/var/lib/grafana
    depends_on:
      prometheus:
        condition: service_started
    networks:
      - app-network
    environment:
      - GF_LOG_LEVEL=warn

volumes:
  mongo_data:
  prometheus_data:
  grafana_data:
  shared_ca:

networks:
  app-network:
    driver: bridge